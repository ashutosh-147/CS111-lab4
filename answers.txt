# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Ashutosh Shiledar
Student ID: 304142693
Email: ashutosh.shiledar@gmail.com

# Partner 2 (if you're working in a team)
Name: Nicholas Chung
Student ID: 404252775
Email: nickchung114@g.ucla.edu


# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We decided to use pthreads for downloads because the communication with the tracker should be a critical section. For uploads, we just used forks.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

There were several locations in the code with strcpy(), which could cause a buffer overrun. Similarly, the sprintf() function at some locations could cause a buffer overrun. Fixed to strncpy() and snprintf(). 

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

We prevented downloaders from asking for parent directories (includes root and home [i.e. '~/....']).

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

We implemented two bad cases, one being an infinite write when a downloader asks for a file, and the other being an attempt to download the source code. We implemented the infinite write by shifting the control structure to deviate from 'write_from_taskbuf' in 'task_upload' to an infinite printf. We implemented the parent directory attack by changing the osp2p_write file name to '../osppeer.c'.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
